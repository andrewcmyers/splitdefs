.TH SPLITDEFS 1 "1 Aug 1998" "MIT Laboratory for Computer Science"
.SH NAME
splitdefs \- split an include file's definitions among individual includes
.SH SYNOPSIS

.HP
.B splitdefs
[
.BR \-I inclir
] ...
[
.BR \-D defn
] ...
[
.BR \-d dir
]
[
.BR \-p prefix
]
[
.BR \-v
]
<.h file> ...

.SH DESCRIPTION
One of the annoyances of programming in C or C++ is excessive rebuilding
when using
.IR make (1).
One cause of this rebuilding is the natural
desire to organize preprocessor definitions into central configuration files,
particularly when
.IR autoconf (1)
is being used.  Splitdefs addresses
this problem by automatically splitting configuration files into smaller
headers, allowing fine-grained dependency analysis and fewer gratuitous
compilations.

Splitdefs automatically splits the central .h file into a group of smaller
include files, one per definition found in the central file. Source files that
use a definition may include just its corresponding .h file. As a result,
only changes to the definitions that affect a particular source file
will cause that source file to be rebuilt, since the source file does not
directly depend on the central configuration file.

Splitdefs only regenerates the .h file for a particular definition
when its value changes, rather than generating it anew for each change
to the central .h file (which would also cause gratuitous compilation).

The .h file that is split may contain other preprocessor directives,
such as #include, #ifdef, #else, and #endif statements. These statements
will have their normal effect, as will any #define or #undef statements
encountered in other .h files included by the split file. #define
or #undef statements in the file to be split will also result in a
corresponding .h file. Comments containing a single #undef statement (as
generated by autoconf scripts) will be treated as if they were visible
#undef statements.

By default, the resulting include files are placed in a subdirectory
whose name is derived from the name of the split file. For example,
if the split file is named "config.h", the directory is named
"config.h.d". The names of the result files are exactly the same
as the names of the corresponding definitions, plus the usual ".h"
extension. For example, if "config.h" contains the line

.EX
#define NDEBUG
.EE

Then the file "config.h.d/NDEBUG.h" will be created, with the same definition in
it.

If the file of the appropriate name already exists in the directory,
and its new contents differ from the old ones, the file contents are
overwritten. Otherwise, the old file is left untouched, which avoids
triggering unnecessary rebuilding.

.SH "OPTIONS"
.TP 6
.B \-I include-file
An option of this form is passed to cpp when the split file is processed,
affecting the search for any files included from the split file.
.TP 6
.B \-D definition
Add a definition to be passed to cpp when the split file is processed.
.TP 6
.B \-d directory
Set the directory in which new .h files should be generated, rather than
use the default directory.
.TP 6
.B \-p prefix
The .h files generated by splitdefs are protected for multiple inclusion
by the usual #ifndef/#define construct. The name of the macro that is
used in this construct is produced by concatenating the "prefix" to the
uppercase name of the file. By default, the prefix is "SPLITDEFS_".
.TP 6
.B \-v
Report the version number of splitdefs and be verbose.

.SH EXAMPLES

The idea for using splitdefs is to run it from a Makefile, with a line
like the following:

.EX
stamp: config.h Makefile
	splitdefs $(CINCLUDES) $(CDEFINES) config.h
	@touch stamp
.EE

This rule will allow "config.h" to be used as a source file or as an
automatically-updated configuration file, without causing excessive
rebuilding.  Source files in this directory which use a definition such
as NDEBUG would include "config.h.d/NDEBUG.h", rather than including
"config.h" directly, as they might in the absence of splitdefs. Simple
automated dependency analysis (e.g. using .IR makedepend (1)) will then
result in a precise determination of when the source files ought to be
rebuilt.

.SH ENVIRONMENT

This program requires the standard Unix utility
.IR cpp .

.SH BUGS

None are known at this time.

.SH AUTHOR

Andrew Myers
.br
andru@cs.cornell.edu
.br
http://www.cs.cornell.edu/andru

.SH SOURCE

https://github.com/andrewcmyers/splitdefs

.SH "SEE ALSO"
make(1), makedepend(1), cpp(1), autoconf(1)
